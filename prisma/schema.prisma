// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  isAdmin   IsAdmin  @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String
  inStock       Int
  originalPrice Float
  salePrice     Float
  featured      Featured    @default(TRUE)
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String      @db.ObjectId
  extras        String[]
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Extras {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String
  referralCode String   @unique
  points       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  address    String
  contact    String
  orderItems OrderItem[]
  quantity   Int
  subTotal   Float
  total      Float
  status     Status      @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Featured {
  TRUE
  FALSE
}

enum Status {
  PENDING
  CONFIRM
  DELIVERED
  DISPATCHED
}

enum IsAdmin {
  PENDING
  APPROVED
  REJECTED
}
