generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  image     String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String
  items     Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String
  inStock       Int
  originalPrice Float
  salePrice     Float
  featured      Boolean
  isRecommended Boolean
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String         @db.ObjectId
  extrasId      String[]       @db.ObjectId
  extras        Extras[]       @relation(fields: [extrasId], references: [id])
  orderProducts OrderProduct[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?        @db.ObjectId
}

model Extras {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  price       Float
  productId   String[]             @db.ObjectId
  products    Product[]            @relation(fields: [productId], references: [id])
  orderExtras OrderProductExtras[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  password     String
  referralCode String    @unique
  points       Int       @default(0)
  favorites    String[]  @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Order        Order[]
  Product      Product[]
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @db.ObjectId
  name          String
  trxId         String?
  address       String
  contact       String
  orderProducts OrderProduct[]
  quantity      Int
  total         Float
  orderType     OrderType
  orderStatus   OrderStatus    @default(pending)
  isPaid        Boolean
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model OrderProduct {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  order              Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String               @db.ObjectId
  product            Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId          String               @db.ObjectId
  orderProductExtras OrderProductExtras[]
  quantity           Int
  price              Float
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model OrderProductExtras {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  orderProduct   OrderProduct @relation(fields: [orderProductId], references: [id], onDelete: Cascade)
  orderProductId String       @db.ObjectId
  extras         Extras       @relation(fields: [extrasId], references: [id], onDelete: Cascade)
  extrasId       String       @db.ObjectId
  quantity       Int
  price          Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum OrderStatus {
  pending
  preparing
  ready
  completed
}

enum OrderType {
  pickup
  dinning
  delivery
}
